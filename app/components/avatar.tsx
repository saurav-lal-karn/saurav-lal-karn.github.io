/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/final_avatar.glb --types --typescript 
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGraph } from "@react-three/fiber";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { GLTF, SkeletonUtils } from "three-stdlib";
import { useSpring, config as configConstants, a } from "@react-spring/three";

type GLTFResult = GLTF & {
  nodes: {
    Wolf3D_Hair: THREE.SkinnedMesh;
    Wolf3D_Glasses: THREE.SkinnedMesh;
    Wolf3D_Outfit_Top: THREE.SkinnedMesh;
    Wolf3D_Outfit_Bottom: THREE.SkinnedMesh;
    Wolf3D_Outfit_Footwear: THREE.SkinnedMesh;
    Wolf3D_Body: THREE.SkinnedMesh;
    EyeLeft: THREE.SkinnedMesh;
    EyeRight: THREE.SkinnedMesh;
    Wolf3D_Head: THREE.SkinnedMesh;
    Wolf3D_Teeth: THREE.SkinnedMesh;
    Hips: THREE.Bone;
  };
  materials: {
    Wolf3D_Hair: THREE.MeshStandardMaterial;
    Wolf3D_Glasses: THREE.MeshStandardMaterial;
    Wolf3D_Outfit_Top: THREE.MeshStandardMaterial;
    Wolf3D_Outfit_Bottom: THREE.MeshStandardMaterial;
    Wolf3D_Outfit_Footwear: THREE.MeshStandardMaterial;
    Wolf3D_Body: THREE.MeshStandardMaterial;
    Wolf3D_Eye: THREE.MeshStandardMaterial;
    Wolf3D_Skin: THREE.MeshStandardMaterial;
    Wolf3D_Teeth: THREE.MeshStandardMaterial;
  };
  animations: THREE.AnimationClip[];
};

export function FinalAvatar(
  props: React.ComponentProps<"group"> & { section?: number }
) {
  const { section, ...restProps } = props;
  const groupRef = useRef<THREE.Group>(null);
  const { scene } = useGLTF("models/avatar.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as unknown as GLTFResult;

  const removeRootMotion = (clip: THREE.AnimationClip) => {
    clip.tracks = clip.tracks.filter(
      (track) =>
        !track.name.includes("Hips.position") &&
        !track.name.includes("Hips.quaternion")
    );
  };

  // Animations here
  const { animations: TypingAnimation } = useFBX("/animations/Typing.fbx");
  const { animations: SittingPointingAnimation } = useFBX(
    "/animations/Sitting_And_Pointing.fbx"
  );
  const { animations: StandingAnimation } = useFBX(
    "/animations/Standing_Idle.fbx"
  );
  const { animations: WavingAnimation } = useFBX("/animations/Waving.fbx");

  // Remove root motion from animations
  removeRootMotion(TypingAnimation[0]);
  removeRootMotion(SittingPointingAnimation[0]);
  removeRootMotion(WavingAnimation[0]);
  removeRootMotion(StandingAnimation[0]);

  TypingAnimation[0].name = "Typing";
  StandingAnimation[0].name = "Standing";
  WavingAnimation[0].name = "Waving";
  SittingPointingAnimation[0].name = "SittingPointing";
  const { actions } = useAnimations(
    [
      TypingAnimation[0],
      StandingAnimation[0],
      WavingAnimation[0],
      SittingPointingAnimation[0],
    ],
    groupRef
  );

  const avatarProps = useSpring({
    rotation:
      section === 0
        ? [0, Math.PI / 3, 0] // Home - facing forward with slight right turn
        : section === 1
        ? [0, 0.103, 0] // About - facing left
        : section === 2
        ? [0, Math.PI, 0] // Projects - slight left turn
        : section === 3
        ? [0, Math.PI / 3, 0] // Contact - facing right
        : [0, 0, 0], // Default - facing forward
    position:
      section === 0
        ? [0, 0, 0.544]
        : section === 1
        ? [0.321, -0.154, 0.567]
        : section === 2
        ? [-0.305, -0.19, -0.608]
        : section === 3
        ? [0, 0, 0.544]
        : [0, 0, 0],
    config: configConstants.slow,
  });

  // Play the typing animation
  useEffect(() => {
    if (section === 0) {
      actions["SittingPointing"]?.reset().fadeOut(0.5).stop();
      actions["Waving"]?.reset().fadeIn(0.5).play();
    } else if (section === 1) {
      actions["Waving"]?.reset().fadeOut(0.5).stop();
      actions["Typing"]?.reset().fadeOut(0.5).stop();
      actions["SittingPointing"]?.reset().fadeIn(0.5).play();
    } else if (section === 2) {
      actions["SittingPointing"]?.reset().fadeOut(0.5).stop();
      actions["Standing"]?.reset().fadeOut(0.5).stop();
      actions["Typing"]?.reset().fadeIn(0.5).play();
    } else if (section === 3) {
      actions["Typing"]?.reset().fadeOut(0.5).stop();
      actions["Standing"]?.reset().fadeIn(0.5).play();
    }
  }, [section]);

  return (
    <group ref={groupRef} {...restProps} dispose={null}>
      <a.group
        rotation={avatarProps.rotation as unknown as [number, number, number]}
        position={avatarProps.position as unknown as [number, number, number]}
      >
        <primitive object={nodes.Hips} />
        <skinnedMesh
          geometry={nodes.Wolf3D_Hair.geometry}
          material={materials.Wolf3D_Hair}
          skeleton={nodes.Wolf3D_Hair.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Glasses.geometry}
          material={materials.Wolf3D_Glasses}
          skeleton={nodes.Wolf3D_Glasses.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Top.geometry}
          material={materials.Wolf3D_Outfit_Top}
          skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
          material={materials.Wolf3D_Outfit_Bottom}
          skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
          material={materials.Wolf3D_Outfit_Footwear}
          skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Body.geometry}
          material={materials.Wolf3D_Body}
          skeleton={nodes.Wolf3D_Body.skeleton}
        />
        <skinnedMesh
          name="EyeLeft"
          geometry={nodes.EyeLeft.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeLeft.skeleton}
          morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
        />
        <skinnedMesh
          name="EyeRight"
          geometry={nodes.EyeRight.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeRight.skeleton}
          morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Head"
          geometry={nodes.Wolf3D_Head.geometry}
          material={materials.Wolf3D_Skin}
          skeleton={nodes.Wolf3D_Head.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Teeth"
          geometry={nodes.Wolf3D_Teeth.geometry}
          material={materials.Wolf3D_Teeth}
          skeleton={nodes.Wolf3D_Teeth.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
        />
      </a.group>
    </group>
  );
}

useGLTF.preload("models/avatar.glb");
